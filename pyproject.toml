[project]
name = "minimax-speech"
version = "0.1.0"
description = "A Python package for MiniMax speech API (T2A, A2T) with support for Chinese, English, French, and Russian"
readme = "README.md"
authors = [
    { name = "drunkenQCat", email = "songjh123123@outlook.com" }
]
requires-python = ">=3.10"
dependencies = [
    "requests>=2.31.0",
    "pydantic>=2.0.0",
    "typing-extensions>=4.0.0",
    "aiohttp>=3.8.0",
    "asyncio-mqtt>=0.16.0",
    "openpyxl>=3.1.5",
    "pypinyin>=0.54.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "ipdb",
    "pre-commit>=3.0.0",
    "streamlit>=1.46.1",
]

[project.scripts]
minimax-speech = "minimax_speech.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project.urls]
Homepage = "https://github.com/drunkenQCat/minimax-speech"
Repository = "https://github.com/drunkenQCat/minimax-speech"
Documentation = "https://github.com/drunkenQCat/minimax-speech#readme"

[tool.pyright]
ignore = ["reportInvalidTypeForm"]


[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$' 
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["minimax_speech"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pydantic.*",
    "aiohttp.*",
    "requests.*"
]
ignore_missing_imports = true

[tool.ruff]
# Match the line length from the black configuration.
line-length = 88
# Match the target version from the black configuration.
target-version = "py310"

[tool.ruff.lint]
# Enable a broad set of rules for stricter checking.
# E, F, W: Standard pycodestyle and Pyflakes
# I: isort
# UP: pyupgrade
# ANN: flake8-annotations (for type hint enforcement)
# TID: flake8-typing-imports (for typing import best practices)
# D: pydocstyle (for docstring conventions)
select = ["E", "F", "W", "I", "UP", "ANN", "TID", "D"]

# Ignore some rules that can be noisy or conflict with other tools/styles.
# D100, D101, D102, D103, D104, D105, D106, D107: Missing docstrings (can be added gradually)
# ANN101: Missing type annotation for `self` in method
# ANN102: Missing type annotation for `cls` in classmethod
ignore = ["D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107", "ANN101", "ANN102"]

[tool.ruff.format]
# Like Black, but faster.
quote-style = "double"